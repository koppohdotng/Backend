"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validatePartnerParams = exports.sdkVersionInfo = exports.mapServerUri = void 0;
const packageJson = __importStar(require("../package.json"));
const constants_1 = require("./constants");
/**
 * Converts a numeric key to a smile server URI, or
 * returns the original URI.
 * @param {string|number} uriOrKey - The URI of a Smile ID server or a
 * numeric key that represents it.
 * @returns {string} URI of smile server if in map, original input if URI.
 */
const mapServerUri = (uriOrKey) => {
    if (uriOrKey in constants_1.sidServerMapping) {
        return constants_1.sidServerMapping[uriOrKey];
    }
    return uriOrKey;
};
exports.mapServerUri = mapServerUri;
/** @type {{source_sdk: string, source_sdk_version: string}} */
exports.sdkVersionInfo = {
    source_sdk: 'javascript',
    source_sdk_version: packageJson.version,
};
/**
 * Validates that partner params contains required fields.
 * @param {object} partnerParams - required parameters for each job.
 * @param {string} partnerParams.user_id - your unique identifier for the user.
 * @param {string} partnerParams.job_id - your unique identifier for the job.
 * @param {string|number} partnerParams.job_type - type of job.
 * @throws {Error} if partnerParams is not an object or is missing required keys.
 * @returns {void}
 */
const validatePartnerParams = (partnerParams) => {
    if (!partnerParams) {
        throw new Error('Please ensure that you send through partner params');
    }
    if (typeof partnerParams !== 'object') {
        throw new Error('Partner params needs to be an object');
    }
    ['user_id', 'job_id', 'job_type'].forEach((key) => {
        const partnerKey = key;
        if (!partnerParams[partnerKey]) {
            throw new Error(`Please make sure that ${key} is included in the partner params`);
        }
    });
};
exports.validatePartnerParams = validatePartnerParams;
//# sourceMappingURL=helpers.js.map