import { IdInfo, PartnerParams } from './shared';
export declare class IDApi {
    private partner_id;
    private api_key;
    private axiosInstance;
    constructor(partner_id: string, api_key: string, sid_server: string | number);
    private static createVerificationRequest;
    private static validateParams;
    /**
     * Submit a synchronous job to Smile.
     * @template T
     * @param {PartnerParams} partner_params - the user_id, job_id, and job_type of the job to submit.
     * Can additionally include optional parameters that Smile will return in the
     * job status.
     * @param {IdInfo} id_info - ID information required to create a job.
     * @returns {Promise<T>} A promise that resolves to type T.
     * @throws {Error} If any of the required parameters are missing or if the request fails.
     */
    submit_job<T>(partner_params: PartnerParams, id_info: IdInfo): Promise<T>;
    /**
     * Submit an asynchronous job to Smile.
     * @template T
     * @param {PartnerParams} partner_params - the user_id, job_id, and job_type of the job to submit.
     * Can additionally include optional parameters that Smile will return in the
     * job status.
     * @param {IdInfo} id_info - ID information required to create a job.
     * @param {string} callbackUrl callback url to send job status response to.
     * @returns {Promise<T>} A promise that resolves to the job status.
     * @throws {Error} If any of the required parameters are missing or if the request fails.
     */
    submitAsyncjob<T>(partner_params: PartnerParams, id_info: IdInfo, callbackUrl: string): Promise<T>;
    /**
     * Poll job status from Smile.
     * @template T
     * @param {PartnerParams} partner_params - the user_id, job_id, and job_type of the job to submit.
     * Can additionally include optional parameters that Smile will return in the
     * job status.
     * @param {number} maxRetries - Number of times to retry the request.
     * @param {number} timeout  Polling timeout in milliseconds.
     * @param {number} return_history  whether to return history.
     * @param {number} return_images  Whether to return images.
     * @returns {Promise<any>} A promise that resolves to the job status.
     * @throws {Error} If any of the required parameters are missing or if the request fails.
     */
    pollJobStatus(partner_params: PartnerParams, maxRetries?: number, timeout?: number, return_history?: boolean, return_images?: boolean): Promise<any>;
}
