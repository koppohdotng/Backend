"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IDApi = void 0;
const axios_1 = __importDefault(require("axios"));
const signature_1 = __importDefault(require("./signature"));
const helpers_1 = require("./helpers");
const constants_1 = require("./constants");
/**
 * Validates the provided id info
 * @param {IdInfo} idInfo Contains info needed for the verification job
 * @returns {void}
 * @throws {Error} - If the id info is invalid.
 */
const validateIdInfo = (idInfo) => {
    if (typeof idInfo !== 'object') {
        throw new Error('ID Info needs to be an object');
    }
    if (!idInfo || Object.keys(idInfo).length === 0) {
        throw new Error('Please make sure that id_info not empty or nil');
    }
    if (!idInfo.id_number || idInfo.id_number.length === 0) {
        throw new Error('Please provide an id_number in the id_info payload');
    }
};
class IDApi {
    constructor(partner_id, api_key, sid_server) {
        this.partner_id = partner_id;
        this.api_key = api_key;
        const url = (0, helpers_1.mapServerUri)(sid_server);
        this.axiosInstance = axios_1.default.create({
            baseURL: `https://${url}`,
        });
    }
    static createVerificationRequest(api_key, id_info, partner_id, partner_params, callbackUrl = undefined) {
        const request = {
            partner_id,
            partner_params: {
                ...partner_params,
                job_type: partner_params.job_type,
            },
            ...id_info,
            ...new signature_1.default(partner_id, api_key).generate_signature(),
            ...helpers_1.sdkVersionInfo,
        };
        if (callbackUrl) {
            return {
                ...request,
                callback_url: callbackUrl,
            };
        }
        return request;
    }
    static validateParams(id_info, partner_params) {
        (0, helpers_1.validatePartnerParams)(partner_params);
        const jobType = parseInt(partner_params.job_type.toString(), 10);
        if (jobType !== constants_1.JOB_TYPE.BASIC_KYC &&
            jobType !== constants_1.JOB_TYPE.BUSINESS_VERIFICATION) {
            throw new Error(`Please ensure that you are setting your job_type to ${constants_1.JOB_TYPE.BASIC_KYC} or ${constants_1.JOB_TYPE.BUSINESS_VERIFICATION} to query ID Api`);
        }
        validateIdInfo(id_info);
        return jobType;
    }
    /**
     * Submit a synchronous job to Smile.
     * @template T
     * @param {PartnerParams} partner_params - the user_id, job_id, and job_type of the job to submit.
     * Can additionally include optional parameters that Smile will return in the
     * job status.
     * @param {IdInfo} id_info - ID information required to create a job.
     * @returns {Promise<T>} A promise that resolves to type T.
     * @throws {Error} If any of the required parameters are missing or if the request fails.
     */
    async submit_job(partner_params, id_info) {
        try {
            const jobType = IDApi.validateParams(id_info, partner_params);
            const request = IDApi.createVerificationRequest(this.api_key, id_info, this.partner_id, partner_params);
            const endpoint = jobType === constants_1.JOB_TYPE.BUSINESS_VERIFICATION
                ? '/business_verification'
                : '/id_verification';
            const response = await this.axiosInstance.request({
                method: 'post',
                url: endpoint,
                data: request,
            });
            return response.data;
        }
        catch (err) {
            return Promise.reject(err);
        }
    }
    /**
     * Submit an asynchronous job to Smile.
     * @template T
     * @param {PartnerParams} partner_params - the user_id, job_id, and job_type of the job to submit.
     * Can additionally include optional parameters that Smile will return in the
     * job status.
     * @param {IdInfo} id_info - ID information required to create a job.
     * @param {string} callbackUrl callback url to send job status response to.
     * @returns {Promise<T>} A promise that resolves to the job status.
     * @throws {Error} If any of the required parameters are missing or if the request fails.
     */
    async submitAsyncjob(partner_params, id_info, callbackUrl) {
        try {
            const jobType = IDApi.validateParams(id_info, partner_params);
            const request = IDApi.createVerificationRequest(this.api_key, id_info, this.partner_id, partner_params, callbackUrl);
            const endpoint = jobType === constants_1.JOB_TYPE.BUSINESS_VERIFICATION
                ? '/async_business_verification'
                : '/async_id_verification';
            const response = await this.axiosInstance.request({
                method: 'post',
                url: endpoint,
                data: request,
            });
            return response.data;
        }
        catch (err) {
            return Promise.reject(err);
        }
    }
    /**
     * Poll job status from Smile.
     * @template T
     * @param {PartnerParams} partner_params - the user_id, job_id, and job_type of the job to submit.
     * Can additionally include optional parameters that Smile will return in the
     * job status.
     * @param {number} maxRetries - Number of times to retry the request.
     * @param {number} timeout  Polling timeout in milliseconds.
     * @param {number} return_history  whether to return history.
     * @param {number} return_images  Whether to return images.
     * @returns {Promise<any>} A promise that resolves to the job status.
     * @throws {Error} If any of the required parameters are missing or if the request fails.
     */
    async pollJobStatus(partner_params, maxRetries = 4, timeout = 5000, return_history = false, return_images = false) {
        try {
            (0, helpers_1.validatePartnerParams)(partner_params);
            const data = {
                user_id: partner_params.user_id,
                job_id: partner_params.job_id,
                partner_id: this.partner_id,
                history: return_history,
                image_links: return_images,
                ...new signature_1.default(this.partner_id, this.api_key).generate_signature(),
            };
            const pollEndpoint = (retries) => {
                return new Promise((resolve, reject) => {
                    this.axiosInstance
                        .post('/job_status', data)
                        .then((response) => {
                        if (response.data.job_complete ||
                            retries <= 0 ||
                            response.status !== 200) {
                            return resolve(response.data);
                        }
                        // retry again
                        return setTimeout(() => {
                            pollEndpoint(retries - 1)
                                .then(resolve)
                                .catch(reject);
                        }, timeout);
                    })
                        .catch((error) => {
                        if (retries > 0) {
                            setTimeout(() => {
                                pollEndpoint(retries - 1)
                                    .then(resolve)
                                    .catch(reject);
                            }, timeout);
                        }
                        else {
                            // Max retries reached, reject with the error
                            reject(error);
                        }
                    });
                });
            };
            return await pollEndpoint(maxRetries);
        }
        catch (error) {
            return Promise.reject(error);
        }
    }
}
exports.IDApi = IDApi;
//# sourceMappingURL=id-api.js.map